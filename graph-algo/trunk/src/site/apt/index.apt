Neo4j graph-algo

	Neo4j graph-algo is a component that contains implementations of
	some common graph algorithms for Neo4j. This includes algorihms for
	finding shortest paths, such as Breadth First Search and Dijkstra.
	There are also algorithms for several graph measures such as
	centrality measures. These include:
	
	* Shortest path
	
	* Dijkstra and A*

	* Eccentricity

	* Network diameter

	* Network radius

	* Stress centrality

	* Closeness centrality

	* Betweenness centrality

	* Eigenvector centrality

	[]

	Here a few parts of this component will be presented. For more details,
	see the {{{http://wiki.neo4j.org/content/Graph-algo}wiki pages}}.

Shortest path

	Calculating the shortest path (least number of relationships) between node A and B
	
%{source-code|snippet=shortestPathUsage|file=src/test/java/examples/SiteExamples.java}

	Using A* to calculate the cheapest path between node A and B, where cheapest is
	f.ex. the path in a network of roads which has the shortest length between node A and B.

%{source-code|snippet=astarUsage|file=src/test/java/examples/SiteExamples.java}

~~Centrality package
~~
~~	The centrality package contains implementations of the centrality measures
~~	mentioned earlier. Most centrality measures require an underlying shortest
~~	path algorithm of the type SingleSourceShortestPath (i.e. from one node to
~~	many others). The only other thing that is needed is a set of the nodes we
~~	would like a centrality value computed for.
~~	Example:
~~
~~%{source-code|snippet=centralityUsage|file=src/test/java/examples/SiteExamples.java}
