This component depends on the following
JDK 1.6+
Ant

Building
===============================
To compile run
ant default

To set up and run an example run

ant setup_example

This will run a solr example in the example directory.
The example is based up user's reviewing businesses, currently cinemas.
Users will have a social graph, as in users will know other users.
Neo will contain the social graph, which is created through solr's index interface.

In the example, a user id neoUserId is passed to solr along with a text search for a review
if there are review's from other users in neoUserId's social graph, then those reviews get
boosted to the top of the results.


The etc directory contains several files
post.sh (used to send xml files to Solr)
generate_reviews.pl / generate_relationships.pl ( create random
Use your browser to hit
http://localhost:8983/solr/select?q={!boost%20b=social_g%28neoUserId,4%29}staff&amp;fl=*,score

The query is based on Solrs boost function http://wiki.apache.org/solr/FunctionQuery

 {!boost b=social_g(neoUserId,4)}staff
 Where social_g is the defined neo4j boost function, 4 is the neoUserId of the person performing
 the search, and staff is the query term we will search reviews with.
 
 ================
 
 To configure
 ==================
 The index side of things
 Solr can index XML files posted to it over HTTP
 
We reuse this interface to provide a consistent way to add nodes to a neo4j graph.
In example/solr/conf/solrconfig.xml
We include
<!-- neo4j indexing implementation -->
<updateRequestProcessorChain>
   <processor class="com.neo.search.index.NeoSocialUpdateProcessorFactory"/>
   <processor class="solr.RunUpdateProcessorFactory" />    
   <processor class="solr.LogUpdateProcessorFactory" /> 
</updateRequestProcessorChain>

This example is of a social graph, so requires a field containing
a neoUserId, and a neoRelationship. Both of these can be configured.
You can also configure the neoDB location for the embedded neo db.

The default values shown below:

<updateRequestProcessor>
   
   <processor class="com.neo.search.index.NeoSocialUpdateProcessorFactory">
     <str name="neoUserId">neoUserId</str>
     <str name="neoRelationshipField">neoRelationship</str>
     <str name="neoDB">/tmp/neo</str>
   </processor>
   <processor class="solr.RunUpdateProcessorFactory" />    
   <processor class="solr.LogUpdateProcessorFactory" /> 
 </updateRequestProcessor>
 
 
 Query time
 We are using Solr's boost functions to query neo and affect scores.
 To include our code we copy the necessary jar files to example/solr/lib
 and add the following to example/solr/conf/solrconfig.xml
 <valueSourceParser name="social_g" class="com.neo.search.solr.NeoValueSourceParser" />
 
 where social_g is the name we give to the function query
 {!boost b=social_g(neoUserId,4)}staff
 
 ===============
 
 Current Limitations
 =======================
Right now retrieving information back on a function query isn't possible within solr
we are setting scores to 0 for non-boosted documents, and multiplying by 1 for boosted documents
just to provide a visualization
  
We are awaiting on a solr fix 
http://issues.apache.org/jira/browse/SOLR-1298
Which allows us to capture the output of a function query and put it in the result documents returned.
  